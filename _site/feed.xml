<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>James&apos; Portfolio</title>
    <description>Northwestern MS in Robotics Student Portfolio</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 15 Mar 2023 12:27:20 -0500</pubDate>
    <lastBuildDate>Wed, 15 Mar 2023 12:27:20 -0500</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Custom built ROV/AUV</title>
        <description>&lt;p&gt;ROS2, Electrical Design, Mechanical Design, Python, Mavlink&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/oubrejames/oubrejames.github.io/gh-pages/assets/images/rob_minor.gif
&quot; alt=&quot;rob_minor_gif&quot; width=&quot;700&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;While at LSU, I completed a minor in robotics engineering alongside my electrical engineering
major. For this minor I took a number of robotics related classes covering a range of topics. Many 
of these classes were very hands on and I got a lot of useful project experience. Two of the 
courses that I found particularly useful were Intro to Robotics Engineering and Autonomous Robotic Vehicles&lt;/p&gt;

&lt;p&gt;In Intro to Robotics Engineering we learned about a broad array of topics from mechanical design to 
software. We learned about robotic actuators and mobility mechanisms, robot motion control, navigation 
and mapping, and human-robot interaction. Particularly, we had many interesting projects involving 
the Parallax Activitybots, hexapods, and Turtlebots. Furthermore, the class focused heavily on learning
ROS and had many labs, classes, and assignments dedicated to learning it.&lt;/p&gt;

&lt;p&gt;Autonomous Robotic Vehicles covered topics like vehicle kinematics, motion control, perception, 
localization, path planning, and navigation. In the class we learned about and implemented different 
probabilistic methods like Particle Filter and Extended Kalman Filter (EKF) for navigation. As our final 
project of the class, we implemented an Extended Kalman Filter (EKF) SLAM using Python and ROS on a Turtlebot 
to navigate through a maze, map it, and localize itself.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/209484859-2579aa0f-0024-4640-8194-f3b06593e2fa.PNG&quot; height=&quot;400&quot; width=&quot;430&quot; /&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/46512429/209484862-2830e017-f679-415b-ab06-1b02ff7585c9.jpg&quot; height=&quot;400&quot; width=&quot;430&quot; /&gt; &lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;h2&gt; &lt;a href=&quot;https://github.com/oubrejames/slam_ENGR_4200&quot;&gt;View it on Github&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;

&lt;h2 id=&quot;projects&quot;&gt;Projects&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;Maze solving robot (leftmost gif)&lt;/strong&gt;&lt;/ins&gt;:  Programmed Parallax Activitybot in C++ to navigate through a 
maze, create a map of the maze, and save the quickest path to the end&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;Hexapod (middle gif)&lt;/strong&gt;&lt;/ins&gt;:  Explored different gaits and control to move the hexapod in 
particular ways, achieve turning motions, and climb stairs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;Increasing Activitybot Payload (rightmost gif)&lt;/strong&gt;&lt;/ins&gt;:  Created an external chassis for the
Activitybot and retrofitted its drivetrain with different gears to increase its torque capacity to 
push heavier objects&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;Extended Kalman Filter SLAM on Turtlebot&lt;/strong&gt;&lt;/ins&gt;:  Implemented EKF SLAM using Python and ROS 
to navigate through a maze, map it, and localize itself&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;&lt;a href=&quot;https://oubrejames.github.io/golf/&quot;&gt;Golf Range Finder&lt;/a&gt;&lt;/strong&gt;&lt;/ins&gt;:  Created a computer
vision system that tells a user how far they are from a golf flag using just an image of the flag&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;&lt;a href=&quot;https://oubrejames.github.io/cocktail/&quot;&gt;Automated Cocktail Maker&lt;/a&gt;&lt;/strong&gt;&lt;/ins&gt;:  Designed
and created an automatic cocktail machine that can serve different drinks based off the glass inserted 
into it&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;relevant-classes&quot;&gt;Relevant Classes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Intro to Robotics Engineering&lt;/li&gt;
  &lt;li&gt;Autonomous Robotic Vehicles&lt;/li&gt;
  &lt;li&gt;Sensors and Actuators&lt;/li&gt;
  &lt;li&gt;Intro Computer Vision&lt;/li&gt;
  &lt;li&gt;Adjustable Speed Drives&lt;/li&gt;
  &lt;li&gt;Microprocessor Systems&lt;/li&gt;
  &lt;li&gt;Advanced Control System Design&lt;/li&gt;
  &lt;li&gt;Discrete Control System Design&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 15 Mar 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/halo_auv/</link>
        <guid isPermaLink="true">http://localhost:4000/halo_auv/</guid>
        
        
        <category>ROS2</category>
        
        <category>Electrical Design</category>
        
        <category>Mechanical Design</category>
        
        <category>Python</category>
        
        <category>Mavlink</category>
        
      </item>
    
      <item>
        <title>Motion Mirroring Robotic Arm</title>
        <description>&lt;p&gt;C, Mechatronics, Embedded Systems, I2C&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;As part of Northwestern’s microprocessor design course, my group and I created an Electromyography
(EMG) controlled robotic manipulator. This allows a user to connect an EMG sensor to their arm to
open and close a robotic gripper by simply opening and closing their hand. We also combined project with 
another group in the class who were controlling a 2 DOF robotic arm’s motion based off of IMU data.
By combining these projects, we were able to create a system that would move a robot arm and control 
the gripper based off of the user’s motion.&lt;/p&gt;

&lt;h2 id=&quot;emg-gripper&quot;&gt;EMG Gripper&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6Y9bxQ33sTY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;This project was developed around the Microbit V2. Code is typically written to the Microbit in Python,
however, we were writing directly to the Microbit’s microcontroller (nRF52833) in C. The end-effector
itself is a mechanical gripper that opens and closes based off of the position of a connected servo.
We controlled this servo with a PCA9685 servo driver over I2C. Additionally, we used two sensors
in this project: an EMG sensor and a force sensitive resistor (FSR). The EMG sensor measures electrical 
signals in muscles that are generated from movement. This is attached to the users arm with electrodes
and used to detect if the hand is closed or not. The FSR measures the amount of
force that is applied to it. This is placed on the inside of the gripper and used to detect if the 
gripper is actively gripping something.&lt;/p&gt;

&lt;p&gt;The basic operation of this system is that the output of the two sensors are constantly being read
by the Microbit. If the EMG sensor gives a high signal, then the user is trying to grasp. When this
is detected, PWM signals are sent to the servo driver over I2C in a loop, closing the gripper incrementally
with each iteration. When an item is grasped, a forced is applied to the FSR, producing a 
high signal that is used to break the grasping loop and hold the gripper at a constant position.
Once, the user releases their grasp, the gripper will then start to incrementally open, unless
interrupted by another grasp command.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;h2&gt; &lt;a href=&quot;https://github.com/oubrejames/emgripper&quot;&gt;View EMG Gripper Github&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;

&lt;h2 id=&quot;emg-gripper--imu-arm&quot;&gt;EMG Gripper + IMU Arm&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xjytBSXibu4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;When the EMG gripper is combined with the IMU controlled arm, the resulting system allows a user to
manipulate the robot to perform various actions just by moving their own arm and hand.&lt;/p&gt;

&lt;h2 id=&quot;the-team&quot;&gt;The Team&lt;/h2&gt;
&lt;h4 id=&quot;emg-gripper-1&quot;&gt;EMG Gripper&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;David Dorf&lt;/li&gt;
  &lt;li&gt;Katie Hughes&lt;/li&gt;
  &lt;li&gt;James Oubre&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;imu-arm&quot;&gt;IMU Arm&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Nicolas Morales&lt;/li&gt;
  &lt;li&gt;Hang Yin&lt;/li&gt;
  &lt;li&gt;Felipe Jannarone&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 11 Dec 2022 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/Gripper/</link>
        <guid isPermaLink="true">http://localhost:4000/Gripper/</guid>
        
        
        <category>C</category>
        
        <category>Mechatronics</category>
        
        <category>Embedded Systems</category>
        
        <category>I2C</category>
        
      </item>
    
      <item>
        <title>BotChocolate</title>
        <description>&lt;p&gt;Computer Vision, OpenCV, ROS2, Python, Motion Planning, Moveit, Intel Realsense, Emika Franka Robot Arm&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;iframe width=&quot;720&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/Q_aNWWe4h5M&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The purpose of this project was to create hot chocolate using the Franka Emika 7 DOF robot arm. To perceive its environment, the system utilizes an Intel D435i camera AprilTags. Upon initial setup, a calibration process must be completed. After this, the process consisted of using AprilTags to locate a scoop of cocoa, a mug, a spoon, and a kettle relative to the robot. Next, using our custom MoveIt API for Python, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;movebot&lt;/code&gt;, the robot is able to perform path planning between all of these objects. It turns on the kettle, dumps the cocoa powder into the mug, pours the hot water over the power, and stirs the mixture it with the spoon.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;h2&gt; &lt;a href=&quot;https://github.com/oubrejames/bot_chocolate&quot;&gt;View BotChocolate Github&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;

&lt;h2 id=&quot;moveit-api&quot;&gt;Moveit API&lt;/h2&gt;
&lt;p&gt;Because the ROS2 MoveIt package does not have a Python API yet, creating one was the first step. By 
looking into the MoveIt ROS2 actions and services, we were able to create an API that takes either 
Cartesian coordinates of the Franka end-efffector or joint-state positions of each joint and creates
a path to the specified position. It also allows for the choice of moving in a Cartesian path.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Sed9XwHT-7c&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;vision&quot;&gt;Vision&lt;/h2&gt;
&lt;p&gt;The vision system is comprised of two major parts: calibration and component location. AprilTags are
used to detect where each of the hot chocolate making components are. The AprilTags are located using
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apriltag_ros&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;There is one tag fixed to a kettle and one tag fixed to a jig that has slots for a mug, cocoa scooper,
and a spoon. Once these tags are found in the camera frame, there are two transformation trees 
describing where all the hot chocolate components are relative to the camera and where each link of
the Franka robot arm is relative to the robot’s base. However, we need to connect these trees to 
get the location of each component relative to the robot’s base. This is where the calibration is 
used. An AprilTag must be placed in the robot’s gripper, aligned with the gripper’s
coordinate frame and in view of the camera to calibrate. We then wrote a program that finds the location of the tag
and relates it to the position of the base, connecting the robot frame to the camera frame. We then
save this transformation to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt; file to be used later on when running the main hot chocolate
making sequence.&lt;/p&gt;

&lt;p&gt;After obtaining the transformation from the camera to the robot, the robot can now use the locations
of the two AprilTags to locate and manipulate the hot chocolate components as necessary.&lt;/p&gt;

&lt;h2 id=&quot;motion-planning&quot;&gt;Motion Planning&lt;/h2&gt;
&lt;p&gt;Once the locations of all the components are known, it’s time to make hot chocolate. Cartesian paths
are used to move the robot in straight lines and rotational path planning is used for achieving motions
like tilting to grab the scoop and dumping the cocoa. Both Cartesian and rotational motion are used to achieve pouring.
To make a cup of hot chocolate, the robot first turns on the kettle to heat the water, grab the cocoa scoop, 
pours it in a mug, pours the hot water over the powder, and stirs. We also used serval intermediate 
waypoints to help avoid reaching the joint limits of the robot.&lt;/p&gt;

&lt;h2 id=&quot;the-team&quot;&gt;The Team&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Shantao Cao&lt;/li&gt;
  &lt;li&gt;Allan Garcia-Casal&lt;/li&gt;
  &lt;li&gt;Nicholas Marks&lt;/li&gt;
  &lt;li&gt;James Oubre&lt;/li&gt;
  &lt;li&gt;David Dorf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/206768445-4503edc2-2075-48b4-baf7-e6dc7bd3ca86.png&quot; alt=&quot;bot_choc-min&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Dec 2022 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/Botchoc/</link>
        <guid isPermaLink="true">http://localhost:4000/Botchoc/</guid>
        
        
        <category>Computer Vision</category>
        
        <category>OpenCV</category>
        
        <category>ROS2</category>
        
        <category>Python</category>
        
        <category>Motion Planning</category>
        
        <category>Moveit</category>
        
        <category>Intel Realsense</category>
        
        <category>Emika Franka Robot Arm</category>
        
      </item>
    
      <item>
        <title>Physics Simulation</title>
        <description>&lt;p&gt;Python, Dynamic Systems, Simulation, Jupyter Notebook&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/oubrejames/oubrejames.github.io/4b9a9bb1b282e894d9406c93f0adbf26e34a60b5/assets/images/cropped_jack.gif&quot; alt=&quot;jack_box_gif&quot; width=&quot;600&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Using Lagrangian dynamics, I was able to simulate a box bouncing around within a larger box. First,
I calculated the potential and kinetic energies of the system to obtain its Lagrangian and later on,
the Euler-Lagrange equations. These equations describe the dynamics of the system while not
experiencing impact. To detect impact the following coordinate frames were used.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/208279053-1a1dd404-148d-4dbd-aadc-0b7c9d14c366.png&quot; alt=&quot;jack_box_gif&quot; width=&quot;500&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Using the transformation matrices between these frames, I am able to detect impact if any of the 
smaller box’s vertices intersect the larger box’s walls. Each vertex is checked against each wall 
for every time step of the simulation. If an impact is detected, the dynamic equations are updated and
the simulation continues.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;h2&gt; &lt;a href=&quot;https://github.com/oubrejames/physics-simulator&quot;&gt;View it on Github&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 04 Dec 2022 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/physics_simulator/</link>
        <guid isPermaLink="true">http://localhost:4000/physics_simulator/</guid>
        
        
        <category>Python</category>
        
        <category>Dynamic Systems</category>
        
        <category>Simulation</category>
        
        <category>Jupyter Notebook</category>
        
      </item>
    
      <item>
        <title>Mobile Manipulator Simulation</title>
        <description>&lt;p&gt;Mobile Manipulation / CoppeliaSim / PID Control / Python&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/QY0E-IW8qvQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;As the capstone project for Northwestern’s Robotic Manipulation course I simulated a KUKA youBot
moving to a cube, grasping it, and then placing it in a desired position. First, I created a function
to generate trajectories from the robot’s starting position to all the different waypoints to 
complete the task. The homogeneous transformation matrices between waypoints are used to create a 
screw or Cartesian trajectories between points. These trajectories are then stored in a matrix representing 
the desired movement of the robot’s chassis and end effector. Next, I implemented a PID feedback
controller based off of the robot’s current position and odometry to ensure that the robot can self
correct if error is introduced. Lastly, the actual positions of the robot are stored in a CSV file
and used to simulate the robot in Coppeliasim.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;p&gt;The simulation completed the task in three different scenarios: with poor PID gains, tuned
PID gains, and a different start and end configuration for the cube.  Overall, each 
simulation is able to reduce to zero error before the robot gets the the cube’s standoff position.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;h2&gt; &lt;a href=&quot;https://github.com/oubrejames/youbot_simulation&quot;&gt;View it on Github&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 01 Dec 2022 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/robman/</link>
        <guid isPermaLink="true">http://localhost:4000/robman/</guid>
        
        
        <category>Mobile Manipulation / CoppeliaSim / PID Control / Python</category>
        
      </item>
    
      <item>
        <title>Pen Stealing Robot</title>
        <description>&lt;p&gt;Computer Vision, OpenCV, Python, PincherX 100, Intel Realsense&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JoxrQ2MmBp4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;As part of Northwestern’s orientation hackathon, I used an Intel Realsense D435i camera to detect
the location of a purple Northwestern pen and grab it with a Trossen PincherX 100 robot arm. 
To detect the pen, I converted the RGB image from the Realsense to an HSV image and used the HSV values
to find all purple pixels. Next, I created a binary map where the detected pixels were shown as 
white and all other pixels black. Using this and OpenCv’s contour detection I found the pixel location
of the centroid of pen. This allowed me to find the location of the pen relative to the camera using 
the aligned depth image generated from the Realsense. I then convert the pen position from the camera’s
frame to the robot’s frame and control the robot to move to the pen and grasp it.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;h2&gt; &lt;a href=&quot;https://github.com/oubrejames/pen_challenge&quot;&gt;View it on Github&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 15 Sep 2022 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/Pen/</link>
        <guid isPermaLink="true">http://localhost:4000/Pen/</guid>
        
        
        <category>Computer Vision</category>
        
        <category>OpenCV</category>
        
        <category>Python</category>
        
        <category>PincherX 100</category>
        
        <category>Intel Realsense</category>
        
      </item>
    
      <item>
        <title>Autonomous Sanding</title>
        <description>&lt;p&gt;Computer Vision, OpenCV, UR5 Robot Arm, Manufacturing, Research, Intel Realsense&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;iframe width=&quot;1080&quot; height=&quot;620&quot; src=&quot;https://www.youtube.com/embed/gyQQtJ2jm6k&quot; title=&quot;robotic_sanding&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;While getting my bachelor’s degree at Louisiana State University I worked as an undergraduate researcher
in the Innovation in Control and Robotics Engineering Lab (iCORE Lab). My main area of research was
computer vision for robotic systems. Specifically, as part of an NSF funded research project, I
created a computer vision system to detect surface defects in fiber glass for autonomous sanding.
Once, the locations of the defects were found, two types of path planning were used to create a sanding
path. The path waypoints were then relayed to a UR5e 6 DOF robot arm with a sander attachment to 
sand the defected areas.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/208994781-0e1e5a9e-4540-45f4-ad3e-13374b4bca35.png&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;System Pipeline&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/208988986-65a70827-1d47-4bcf-aab6-9a6e2c07246c.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;System Components&lt;/p&gt;

&lt;!-- &lt;div align=&quot;center&quot;&gt;&lt;h2&gt; &lt;a href=&quot;https://github.com/oubrejames/physics-simulator&quot;&gt;View it on Github&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt; --&gt;
&lt;div align=&quot;center&quot;&gt;&lt;h2&gt; &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S240589632201031X/pdf?md5=6790ab4229b08c78bb91bb6a34d5e885&amp;amp;pid=1-s2.0-S240589632201031X-main.pdf&quot;&gt;Read the paper&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;

&lt;h2 id=&quot;vision&quot;&gt;Vision&lt;/h2&gt;
&lt;p&gt;Using traditional computer vision techniques like canny edge detection, morphological closing, 
contour detection, and binary mapping I was able to detect and isolate defects present on the surface
of a fiber glass panel.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/208990411-230117af-4a57-4276-bc6e-0b72b197a123.png&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Computer Vision Pipeline&lt;/p&gt;

&lt;p&gt;First, an Intel D435i camera captures the RGB and depth images of the fiber glass sample. A canny 
edge detector is applied to the RGB image to separate the inherit pattern visible underneath the 
surface of the fiber glass from the defects present on the surface. After this step, the surface 
defects become easily visible. To create a general region of the defective area, I use morphological
closing to merge nearby edges and fill openings within a certain area to create a blob like structure
where defects reside. Next I use contour detection to get the pixel locations of everything within
the defective regions.&lt;/p&gt;

&lt;h2 id=&quot;path-planning&quot;&gt;Path Planning&lt;/h2&gt;
&lt;p&gt;Once the locations of the defects are known, a path must be created so the robot can sand over all
of the defective areas. Two different types of path planning were implemented. Multi-goal path planning
was needed to make sure the robot goes to each of the separate defective regions and coverage path
planning was used to ensure the robot sanded all of the defects within a given region.&lt;/p&gt;

&lt;p&gt;For multi-goal path planning, a nearest neighbor algorithm was implemented to create a path that 
went to each region based off of the location of the regions centroid. Next, a grid-based sweeping 
algorithm is used to create a path that covers the entire area. Finally, the two plans are combined
and the robot’s sander is pressed against the piece for the coverage paths to ensure sanding and it 
is offset from the piece during multi-goal movements so that smooth sections are not sanded erroneously.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/208995195-854b8fea-4304-4bf5-8cb5-7975b003edc2.png&quot; height=&quot;425&quot; width=&quot;425&quot; /&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/46512429/208995475-84289c70-9f8f-4b67-a78f-b1ce5674cb63.png&quot; height=&quot;425&quot; width=&quot;425&quot; /&gt; &lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;Example of Finalized Path in 2D and 3D&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;p&gt;The system successfully detected the defected areas and we quantified the results by having a person
manually label defects in one of the fiber glass image samples and compared that to what the system
detected. Fifteen fiber glass panels were used and the calculated average sensitivity obtained was 
66.24%, the average specificity was 78.20%, and the resulting accuracy was 81.02%. Furthermore, 
using a profilometer, I measured the surface roughness of certain defected areas before and after 
sanding and found that the average roughness at these areas was about half as rough after performing
autonomous sanding.&lt;/p&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;William Ard&lt;/li&gt;
  &lt;li&gt;Corina Barbalata&lt;/li&gt;
  &lt;li&gt;Joshua Nguyen&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 22 May 2022 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/icore/</link>
        <guid isPermaLink="true">http://localhost:4000/icore/</guid>
        
        
        <category>Computer Vision</category>
        
        <category>OpenCV</category>
        
        <category>UR5 Robot Arm</category>
        
        <category>Manufacturing</category>
        
        <category>Research</category>
        
        <category>Intel Realsense</category>
        
      </item>
    
      <item>
        <title>Cocktail Maker</title>
        <description>&lt;p&gt;Arduino, Circuit Design, Sensors &amp;amp; Actuators&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;iframe width=&quot;424&quot; height=&quot;754&quot; src=&quot;https://www.youtube.com/embed/AqyQ7yTlyfM&quot; title=&quot;cocktail maker&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;As the final project for my Sensors and Actuators class at LSU, I designed an automated cocktail maker.
Using three ultrasonic distance sensors offset at different heights, the system can detect three different 
heights of cups corresponding to a wine glass, pint glass, and a cocktail glass. I implemented logic
on an Arduino to decide what kind of glass is present based off the sensor outputs. Once the type of
cup is known, the Arduino turns on pumps connected to the corresponding cocktail ingredients. Originally,
the system was supposed to dispense wine for the wine glass, beer for the pint, and a mixed drink for
the cocktail glass. However, beer did not dispense properly from the pump and it mostly dispensed
foam so I changed it to dispense a different mixed drink. I also did not actually have any wine when 
making the video so I used water. 
The logic used is shown in the pipeline below.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/209448153-3b40e4dd-774a-401b-9d44-19efafc30134.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;System Pipeline&lt;/p&gt;

&lt;h2 id=&quot;electrical-design&quot;&gt;Electrical Design&lt;/h2&gt;
&lt;p&gt;The electrical design is shown in the image below. The system is powered from a wall outlet to a 12
V power supply. A 7 V voltage regulator is used to power the Arduino and the 12 volts powers a relay
 module which, in turn, powers the pumps. To actually dispense the liquid, the Arduino sends a high
 signal to the corresponding pin on the relay module to close the relay and turn on the pump.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/209448159-8fa2b899-9e08-43c5-86b6-f411c93f6046.png&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Electrical Schematic&lt;/p&gt;

&lt;!-- &lt;div align=&quot;center&quot;&gt;&lt;h2&gt; &lt;a href=&quot;https://github.com/oubrejames/pen_challenge&quot;&gt;View it on Github&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt; --&gt;
</description>
        <pubDate>Wed, 13 Apr 2022 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/cocktail/</link>
        <guid isPermaLink="true">http://localhost:4000/cocktail/</guid>
        
        
        <category>Arduino</category>
        
        <category>Circuit Design</category>
        
        <category>Sensors &amp; Actuators</category>
        
      </item>
    
      <item>
        <title>Electric Formula Racecar</title>
        <description>&lt;p&gt;Circuit Design, Power Systems, PCB Design, Digital Logic, Mechanical Design, Manufacturng&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/oubrejames/oubrejames.github.io/gh-pages/assets/images/wide_fsae1.gif&quot; height=&quot;400&quot; width=&quot;1400&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;For my senior capstone project, I was a part of a group that converted an internal combustion FSAE
racecar to be fully electric. The electrical side of the project consisted of creating a custom high
voltage battery pack (accumulator) with a battery management system to power the vehicle’s motor. There was also 
a low voltage subsystem composed of a device to check for braking and accelerating faults, a circuit
to cut off high voltage power in dangerous scenarios, and 12 V bus for miscellaneous electronics. Furthermore,
because we were converting an existing internal combustion vehicle, certain mechanical alterations
were made. Personally, I was responsible for the low voltage subsystem and acted as team treasurer.&lt;/p&gt;

&lt;h2 id=&quot;low-voltage-electrical&quot;&gt;Low Voltage Electrical&lt;/h2&gt;
&lt;p&gt;The low voltage system is broken up into three main parts: the acceleration and 
brake fault detection device, the safety shutdown circuit, and the 12 V bus. The purpose of this 
subsystem is to handle all auxiliary functions of the vehicle. Basically any function of the car 
outside of the high voltage power train is a part of the low voltage system. Below is the circuit 
diagram for the vehicles auxiliary systems.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211061123-7a96fe45-fb80-4c00-98a7-ed8b1cfdd7d9.png&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Low Voltage Auxillory System Circuit Diagram&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211060715-f450c295-2451-442d-9807-a751f7e2a5b5.png&quot; height=&quot;400&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; Auxillory System PCBs&lt;/p&gt;

&lt;h3 id=&quot;acceleration-and-brake-fault-detection-device&quot;&gt;Acceleration and Brake Fault Detection Device&lt;/h3&gt;
&lt;p&gt;One key feature of this project is the acceleration and brake fault detection device. This device 
detects the following accelerating and braking conditions that could cause harm to the driver:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Simultaneous pressing of accelerator and brake pedals&lt;/li&gt;
  &lt;li&gt;Significant current delivered to motor while driver is hard braking&lt;/li&gt;
  &lt;li&gt;Short or open circuits in the accelerator and break pedal sensors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any of these faults were detected, a trigger signal is sent to a 500 ms timer which would then 
actuate a relay to open the safety shutdown circuit and cut off high voltage power. The logic is 
described in the diagram below.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211351660-95b478a3-97a4-4c37-b137-3bf4f9780392.png&quot; height=&quot;500&quot; width=&quot;900&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Accelerator and Brake Pedal Fault Detection Logic&lt;/p&gt;

&lt;p&gt;Per FSAE rules, the device had to be compeltely analog. Because of this, I chose to detect faults 
using op-amp comparators and logic gates. If the input signal from the sensor went above a certain 
value or outside a specified range, the comparator would send a high signal to 500 ms timer. Below is
the circuit diagram for the device.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211362295-e465339e-2c05-4d23-8f41-d82d6a0bb8dc.png
&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Accelerator and Brake Pedal Fault Detection Circuit Diagram&lt;/p&gt;

&lt;p&gt;Using EaglePCB, I created the manufacturing drawings for the board’s PCB. I then ordered the board 
and soldered the components on myself.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211633971-c9f89743-3217-4d98-9eeb-a563323437c3.png&quot; height=&quot;300&quot; width=&quot;900&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Accelerator and Brake Pedal Fault Detection PCB&lt;/p&gt;

&lt;h3 id=&quot;safety-shutdown-circuit&quot;&gt;Safety Shutdown Circuit&lt;/h3&gt;

&lt;p&gt;A safety shutdown circuit was created to cut off high powered electricity in unsafe conditions. This
circuit connects the 12 V battery to the coils of the two high power relays that are connected to 
the vehicle’s high power battery or accumulator. The rest of the circuit is a number of switches and
relays in series such that if any are disconnected, the circuit is open and no voltage is applied to 
the accumulator relay coils. When there is no voltage at these coils, they are open and the accumulator
is disconnected.&lt;/p&gt;

&lt;p&gt;The circuit has 3 emergency stop buttons, 2 master switches, a brake over travel 
switch, and 2 low voltage relays. The brake over travel switch is a toggle switch located behind the 
break pedal such that if the brakes are pressed extremely hard, the flip is switched and the circuit 
is opened. The 2 low voltage relays are connected to the acceleration and brake fault detection device 
(shown as APPS/BSPD) and the insulation monitoring device (IMD). The IMD measures the insulation 
between the high voltage bus and the chassis ground. If a short between the two is detected, the 
device outputs a high signal to open the relay in the shutdown circuit.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211060489-fb3fc2e4-7bef-4339-ba6c-8e091cb9c5dd.png&quot; height=&quot;600&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Safety Shutdown Circuit&lt;/p&gt;

&lt;h3 id=&quot;low-voltage-power&quot;&gt;Low Voltage Power&lt;/h3&gt;
&lt;p&gt;Part of this project was ensuring it could withstand the FSAE endurance event which we calculated would
take about 30 minutes. To spec out the battery for this, I found the max current draw of each component
on the 12 V bus to be 34.6 A. To complete the endurance event the vehicle required a battery with a
capacity of 17.3 Ah.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211062386-db1ac433-20ec-4532-a877-260ac9ebe49a.png&quot; height=&quot;400&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;12 V Bus&lt;/p&gt;

&lt;h2 id=&quot;high-voltage-electrical&quot;&gt;High Voltage Electrical&lt;/h2&gt;

&lt;p&gt;The high voltage powertrain shown below consists of the high voltage battery pack (accumulator), 
accumulator isolation relays, high voltage disconnects, motor controller, and the motor. The accumulator
isolation relays and high voltage disconnects are used to isolate the accumulator when not driving. 
The high voltage lines are then fed into the motor controller which operates the motor based on the
input from the accelerator pedal position sensors.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211638355-cd7efaf9-2df1-45a8-9109-6f4d6a332829.png&quot; height=&quot;600&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;High Voltage Bus&lt;/p&gt;

&lt;p&gt;The accumulator itself was made of 756 18650 Li-ion rechargeable cells broken up into 9 parallel 
connections of 84 series connections. Because the motor we selected was a 300 V motor, we required a
300 V battery pack. After performing a simulation of the endurance event it was determined that a 
battery required at least a 6.3 kWh capacity at this voltage to finish. Because 18650 cells have a 
nominal voltage of 3.6 V, we concluded that 84 cells in series were necessary. Furthermore, to reach 
the current requirement (21 Ah), we calculated that 9 cells in parallel were needed since the cell’s 
nominal capacity is 2.5 Ah. We also used an off-the-shelf battery management system to ensure proper
cell balancing and charging.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211061422-5a3f2ce8-8b3e-4308-9254-78ec03287e79.png&quot; height=&quot;300&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Battery Model&lt;/p&gt;

&lt;h3 id=&quot;manufacturing&quot;&gt;Manufacturing&lt;/h3&gt;
&lt;p&gt;To assemble the battery pack, series connections were made by spot welding positive and negative
terminals together with nickel strips. Parallel connections were made by screwing thicker nickel
strips into a copper bus bar.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211060775-4c267d84-7744-4ab6-8959-b27025ffc28a.png&quot; height=&quot;400&quot; width=&quot;325&quot; /&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211063614-2411203c-d497-4b3b-930b-90057dc83ef7.png&quot; height=&quot;400&quot; width=&quot;325&quot; /&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Battery Segment Manufacturing&lt;/p&gt;

&lt;h2 id=&quot;mechanical&quot;&gt;Mechanical&lt;/h2&gt;
&lt;p&gt;The mechanical systems of the vehicle are shown below. Changes to the drivetrain and cooling system 
were necessary when changing from internal combustion to electric and a battery housing was needed
to protect and insulate the battery segments.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211065647-dfa76530-b426-4cb4-9a31-2b71c24d21be.png&quot; height=&quot;400&quot; width=&quot;650&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;Mechanical Systems&lt;/p&gt;

&lt;h2 id=&quot;the-team&quot;&gt;The Team&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Douglas Byrd&lt;/li&gt;
  &lt;li&gt;Muhammed Al-Hassani&lt;/li&gt;
  &lt;li&gt;Esther Yoo&lt;/li&gt;
  &lt;li&gt;Michael Hom&lt;/li&gt;
  &lt;li&gt;Felix Rodrigue&lt;/li&gt;
  &lt;li&gt;Jacob Antie &lt;/li&gt;
  &lt;li&gt;Alejandro Nunez&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/211373131-5975e0fe-ff09-467c-9f22-22d847f0455a.jpeg&quot; height=&quot;500&quot; width=&quot;1100&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 23 May 2021 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/fsae/</link>
        <guid isPermaLink="true">http://localhost:4000/fsae/</guid>
        
        
        <category>Circuit Design</category>
        
        <category>Power Systems</category>
        
        <category>PCB Design</category>
        
        <category>Digital Logic</category>
        
        <category>Mechanical Design</category>
        
        <category>Manufacturng</category>
        
      </item>
    
      <item>
        <title>Robotics minor</title>
        <description>&lt;p&gt;ROS1, Mechatronics, SLAM, Controls, Python, C++&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/oubrejames/oubrejames.github.io/gh-pages/assets/images/rob_minor.gif
&quot; alt=&quot;rob_minor_gif&quot; width=&quot;700&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;While at LSU, I completed a minor in robotics engineering alongside my electrical engineering
major. For this minor I took a number of robotics related classes covering a range of topics. Many 
of these classes were very hands on and I got a lot of useful project experience. Two of the 
courses that I found particularly useful were Intro to Robotics Engineering and Autonomous Robotic Vehicles&lt;/p&gt;

&lt;p&gt;In Intro to Robotics Engineering we learned about a broad array of topics from mechanical design to 
software. We learned about robotic actuators and mobility mechanisms, robot motion control, navigation 
and mapping, and human-robot interaction. Particularly, we had many interesting projects involving 
the Parallax Activitybots, hexapods, and Turtlebots. Furthermore, the class focused heavily on learning
ROS and had many labs, classes, and assignments dedicated to learning it.&lt;/p&gt;

&lt;p&gt;Autonomous Robotic Vehicles covered topics like vehicle kinematics, motion control, perception, 
localization, path planning, and navigation. In the class we learned about and implemented different 
probabilistic methods like Particle Filter and Extended Kalman Filter (EKF) for navigation. As our final 
project of the class, we implemented an Extended Kalman Filter (EKF) SLAM using Python and ROS on a Turtlebot 
to navigate through a maze, map it, and localize itself.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46512429/209484859-2579aa0f-0024-4640-8194-f3b06593e2fa.PNG&quot; height=&quot;400&quot; width=&quot;430&quot; /&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/46512429/209484862-2830e017-f679-415b-ab06-1b02ff7585c9.jpg&quot; height=&quot;400&quot; width=&quot;430&quot; /&gt; &lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;&lt;h2&gt; &lt;a href=&quot;https://github.com/oubrejames/slam_ENGR_4200&quot;&gt;View it on Github&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;

&lt;h2 id=&quot;projects&quot;&gt;Projects&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;Maze solving robot (leftmost gif)&lt;/strong&gt;&lt;/ins&gt;:  Programmed Parallax Activitybot in C++ to navigate through a 
maze, create a map of the maze, and save the quickest path to the end&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;Hexapod (middle gif)&lt;/strong&gt;&lt;/ins&gt;:  Explored different gaits and control to move the hexapod in 
particular ways, achieve turning motions, and climb stairs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;Increasing Activitybot Payload (rightmost gif)&lt;/strong&gt;&lt;/ins&gt;:  Created an external chassis for the
Activitybot and retrofitted its drivetrain with different gears to increase its torque capacity to 
push heavier objects&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;Extended Kalman Filter SLAM on Turtlebot&lt;/strong&gt;&lt;/ins&gt;:  Implemented EKF SLAM using Python and ROS 
to navigate through a maze, map it, and localize itself&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;&lt;a href=&quot;https://oubrejames.github.io/golf/&quot;&gt;Golf Range Finder&lt;/a&gt;&lt;/strong&gt;&lt;/ins&gt;:  Created a computer
vision system that tells a user how far they are from a golf flag using just an image of the flag&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;ins&gt;&lt;strong&gt;&lt;a href=&quot;https://oubrejames.github.io/cocktail/&quot;&gt;Automated Cocktail Maker&lt;/a&gt;&lt;/strong&gt;&lt;/ins&gt;:  Designed
and created an automatic cocktail machine that can serve different drinks based off the glass inserted 
into it&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;relevant-classes&quot;&gt;Relevant Classes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Intro to Robotics Engineering&lt;/li&gt;
  &lt;li&gt;Autonomous Robotic Vehicles&lt;/li&gt;
  &lt;li&gt;Sensors and Actuators&lt;/li&gt;
  &lt;li&gt;Intro Computer Vision&lt;/li&gt;
  &lt;li&gt;Adjustable Speed Drives&lt;/li&gt;
  &lt;li&gt;Microprocessor Systems&lt;/li&gt;
  &lt;li&gt;Advanced Control System Design&lt;/li&gt;
  &lt;li&gt;Discrete Control System Design&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 21 May 2021 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/a_robotics_minor/</link>
        <guid isPermaLink="true">http://localhost:4000/a_robotics_minor/</guid>
        
        
        <category>ROS1 Mechatronics</category>
        
        <category>SLAM</category>
        
        <category>Controls</category>
        
        <category>Python</category>
        
        <category>C++</category>
        
      </item>
    
  </channel>
</rss>
